# 8 clips
averages_neg_music <- neg_music_data %>%
group_by(Spreadsheet..Audio, Object.Name) %>%
summarise(
Average.Response = mean(Response, na.rm = TRUE),
se_value = sd(Response, na.rm = TRUE) / sqrt(n())
)
# 8 pics
averages_pos_pic <- pos_pic_data %>%
group_by(Spreadsheet..Image, Object.Name) %>%
summarise(
Average.Response = mean(Response, na.rm = TRUE),
se_value = sd(Response, na.rm = TRUE) / sqrt(n())
)
# 8 pics
averages_neg_pic <- neg_pic_data %>%
group_by(Spreadsheet..Image, Object.Name) %>%
summarise(
Average.Response = mean(Response, na.rm = TRUE),
se_value = sd(Response, na.rm = TRUE) / sqrt(n())
)
all_averages <- bind_rows(
averages_pos_music %>% mutate(Type = "Positive Valence Music"),
averages_neg_music %>% mutate(Type = "Negative Valence Music"),
averages_pos_pic %>% mutate(Type = "Positive Valence Pictures"),
averages_neg_pic %>% mutate(Type = "Negative Valence Pictures"),
)
all_averages$Object.Name <- gsub("Slider", "", all_averages$Object.Name)
# Trim any extra whitespace that might be left after removing "Slider"
all_averages$Object.Name <- trimws(all_averages$Object.Name)
emotion_order <- c("Gloomy", "Anxious", "Sad", "Scared", "Upset", "Excited", "Happy", "Joyful", "Relaxed", "Satisfied")
all_averages$Object.Name <- factor(all_averages$Object.Name, levels = emotion_order)
grouped_averages <- split(all_averages, all_averages$Type)
for(group_name in names(grouped_averages)) {
# Get the specific dataframe for the current group
df_group <- grouped_averages[[group_name]]
# Identify the non-NA column (either Spreadsheet..Audio or Spreadsheet..Image)
df_group <- df_group %>%
mutate(Stimulus = ifelse(!is.na(Spreadsheet..Audio), Spreadsheet..Audio, Spreadsheet..Image))
# Create the confusion matrix plot
p <- ggplot(df_group, aes(x = Object.Name, y = Stimulus, fill = Average.Response)) +
geom_tile() +
ggtitle(paste("Average Responses by Emotion and Stimulus for", group_name)) +
xlab("Emotion") +
ylab("Stimulus") +
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color scheme as needed
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, color = "black"), axis.text.y = element_text(color = "black"), plot.background = element_rect(fill = "white", color = NA),  # Set plot background to white
panel.background = element_rect(fill = "white", color = NA))  # Rotate x-axis labels for readability
# Print and save the plots
print(p)
ggsave(paste("../results/rating-task/", group_name, ".png"), p, width = 9)
}
# Function to summarize data by Object.Name
summarize_data <- function(data, type_label) {
data %>%
group_by(Object.Name) %>%
summarise(
Average.Response = mean(Response, na.rm = TRUE),
se_value = sd(Response, na.rm = TRUE) / sqrt(n())
) %>%
mutate(Type = type_label)
}
# Summarize positive and negative music and picture data
averages_pos_music <- summarize_data(pos_music_data, "Positive Valence Music")
averages_neg_music <- summarize_data(neg_music_data, "Negative Valence Music")
averages_pos_pic   <- summarize_data(pos_pic_data, "Positive Valence Pictures")
averages_neg_pic   <- summarize_data(neg_pic_data, "Negative Valence Pictures")
# Combine all summarized data
all_averages <- bind_rows(
averages_pos_music,
averages_neg_music,
averages_pos_pic,
averages_neg_pic
)
# Clean up Object.Name
all_averages$Object.Name <- gsub("Slider", "", all_averages$Object.Name)
all_averages$Object.Name <- trimws(all_averages$Object.Name)
# Factorize Object.Name based on predefined emotion order
emotion_order <- c("Gloomy", "Anxious", "Sad", "Scared", "Upset", "Excited", "Happy", "Joyful", "Relaxed", "Satisfied")
all_averages$Object.Name <- factor(all_averages$Object.Name, levels = emotion_order)
# Plot all emotions together
full_plot <- ggplot(all_averages, aes(x = Object.Name, y = Average.Response, color = Type)) +
geom_point() +
geom_errorbar(aes(ymin = Average.Response - se_value, ymax = Average.Response + se_value),
width = 0.2) +
labs(title = "All Emotions - Mean Response by Stimulus Valence/Type", x = "Emotion", y = "Mean Response") +
theme_bw() +
ylim(0, 51)
# Save the plot
ggsave('../results/rating-task/All_Emotion_Means_9_13_24.png', full_plot, width = 9)
all_averages$Category <- ifelse(all_averages$Object.Name %in% emotions$neg, "Negative Emotions", "Positive Emotions")
summary_df <- all_averages %>%
group_by(Type, Category) %>%
summarise(
Average.Response = mean(Average.Response),
Combined.SE = sqrt(sum(se_value^2) / n())
)
summary_plot <- ggplot(summary_df, aes(x = Category, y = Average.Response, color = Type, ymin = 0)) +
geom_point() +
geom_errorbar(aes(ymin = Average.Response - Combined.SE, ymax = Average.Response + Combined.SE),
width = 0.2) +
labs(title = "Emotion Categories - Mean Response by Stimulus Valence/Type", x = "Emotion", y = "Mean") +
theme_bw() +
ylim(0, 51)
# Save the plots
ggsave('../results/rating-task/Emotion_Category_Means_9_13_24.png', summary_plot, width = 9)
# Function to summarize data by group
summarize_data <- function(data, group_var) {
data %>%
group_by(!!sym(group_var)) %>%
summarise(
Average.Response = mean(Response, na.rm = TRUE),
se_value = sd(Response, na.rm = TRUE) / sqrt(n())
)
}
# Summarizing positive and negative music and picture data
averages_pos_music <- summarize_data(pos_music_data, "Spreadsheet..Audio")
averages_neg_music <- summarize_data(neg_music_data, "Spreadsheet..Audio")
averages_pos_pic   <- summarize_data(pos_pic_data, "Spreadsheet..Image")
averages_neg_pic   <- summarize_data(neg_pic_data, "Spreadsheet..Image")
# Combine all summaries and add labels
all_averages <- bind_rows(
averages_pos_music %>% mutate(Type = "pos_music"),
averages_neg_music %>% mutate(Type = "neg_music"),
averages_pos_pic   %>% mutate(Type = "pos_pic"),
averages_neg_pic   %>% mutate(Type = "neg_pic")
)
# Simplify Type labeling
all_averages <- all_averages %>%
mutate(Type = case_when(
Type %in% c("pos_music", "neg_music") ~ "Music",
Type %in% c("pos_pic", "neg_pic") ~ "Picture"
))
# Plot all stimuli
all_stims_plotted <- ggplot(all_averages, aes(x = Type, y = Average.Response)) +
geom_point() +
geom_errorbar(aes(ymin = Average.Response - se_value, ymax = Average.Response + se_value),
alpha = 0.4, width = 0.2) +
labs(title = "All Stimuli - Average Responses", x = "Stimulus Type", y = "Mean Response") +
theme_bw()
# Save the plot
ggsave('../results/rating-task/All_Stims_Means_9_13_24.png', all_stims_plotted, width = 14)
# Summarize collapsed stimulus types
collapsed_stims <- all_averages %>%
group_by(Type) %>%
summarise(
Mean_Value = mean(Average.Response),
Combined_SE = sqrt(sum(se_value^2) / n())  # Combining standard errors
)
all_averages$Type[all_averages$Type == "Negative Valence Music" | all_averages$Type == "Positive Valence Music"] = "Music"
all_averages$Type[all_averages$Type == "Negative Valence Pictures" | all_averages$Type == "Positive Valence Pictures"] = "Picture"
collapsed_plot <- ggplot(collapsed_stims, aes(x = Type, y = Mean_Value, color = Mean_Value, label = round(Mean_Value, 2))) +
geom_point() +
geom_text(hjust=0, vjust=0) +
geom_errorbar(aes(ymin = Mean_Value - Combined_SE, ymax = Mean_Value + Combined_SE, color = Mean_Value), alpha = 0.4, width = 0.2) +
labs(title = "Stimulus Response Averages", x = "Stimulus Type", y = "Mean Response") +
theme_bw()
ggsave('../results/rating-task/Average_Stims_Means_9_13_24.png', collapsed_plot, width = 10)
# Function 1: ICC with Fisher transformation (without recoding)
compute_icc_fisher <- function(data_list) {
sapply(data_list, function(data) {
icc_result <- data %>%
select(-Participant.Public.ID) %>%
icc(model = "twoway", type = "consistency", unit = "average")
-1 * fisherz(icc_result$value)  # Fisher transform and reverse score
})
}
# Function 2: ICC with Fisher transformation and recoding of negative correlations
compute_icc_fisher_recode <- function(data_list) {
sapply(data_list, function(data) {
icc_result <- data %>%
select(-Participant.Public.ID) %>%
icc(model = "twoway", type = "consistency", unit = "average")
# Recode correlations less than 0 as 0
icc_value <- ifelse(icc_result$value < 0, 0, icc_result$value)
# Fisher transformation and reverse scoring
-1 * fisherz(icc_value)
})
}
# Create lists of data frames split by Participant.Public.ID
music_negative_list <- split(music_negative, music_negative$Participant.Public.ID)
music_positive_list <- split(music_positive, music_positive$Participant.Public.ID)
pic_negative_list <- split(pic_negative, pic_negative$Participant.Public.ID)
pic_positive_list <- split(pic_positive, pic_positive$Participant.Public.ID)
### Result DataFrame 1: Using ICC with Fisher transformation
results <- data.frame(ID = names(music_negative_list))
results$negmusicICC <- compute_icc_fisher(music_negative_list)
results$posmusicICC <- compute_icc_fisher(music_positive_list)
results$negpicICC <- compute_icc_fisher(pic_negative_list)
results$pospicICC <- compute_icc_fisher(pic_positive_list)
results$allmusicICC <- rowMeans(results[, c("negmusicICC", "posmusicICC")], na.rm = TRUE)
results$allpicICC <- rowMeans(results[, c("negpicICC", "pospicICC")], na.rm = TRUE)
### Result DataFrame 2: Using ICC with Fisher transformation and recoding
results_recode <- data.frame(ID = names(music_negative_list))
results_recode$negmusicICC <- compute_icc_fisher_recode(music_negative_list)
results_recode$posmusicICC <- compute_icc_fisher_recode(music_positive_list)
results_recode$negpicICC <- compute_icc_fisher_recode(pic_negative_list)
results_recode$pospicICC <- compute_icc_fisher_recode(pic_positive_list)
results_recode$allmusicICC <- rowMeans(results_recode[, c("negmusicICC", "posmusicICC")], na.rm = TRUE)
results_recode$allpicICC <- rowMeans(results_recode[, c("negpicICC", "pospicICC")], na.rm = TRUE)
# results <- results %>%
#   filter(negpicICC < 1 &
#          negmusicICC < 1 &
#          pospicICC < 1 &
#          posmusicICC < 1 &
#          allpicICC < 1 &
#          allmusicICC < 1)
# Function to create histogram plots
create_histogram <- function(data, key_vars, title, output_file) {
df_long <- data %>%
gather(key = "Variable", value = "Value", all_of(key_vars))
hist_plot <- ggplot(df_long, aes(x = Value, fill = Variable)) +
geom_histogram(position = "identity", alpha = 0.5) +
labs(title = title, x = "Granularity Score", y = "Count") +
theme_classic()
ggsave(output_file, hist_plot, width = 14)
}
# Function to create correlation scatter plots with linear model fit
create_scatter_plot <- function(data, x_var, y_var, x_label, y_label, title, output_file) {
scatter_plot <- ggplot(data, aes(x = !!ensym(x_var), y = !!ensym(y_var))) +
geom_point() +
stat_smooth(method = 'lm', formula = y ~ x) +
xlab(x_label) +
ylab(y_label) +
ggtitle(title) +
theme_classic() +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16, face = 'bold', hjust = 0.5))
ggsave(output_file, scatter_plot, width = 10)
}
# Plotting histograms
create_histogram(results, c("negmusicICC", "negpicICC"),
"Negative Emotions - Granularity Scores (Fisher r to z)",
"../results/rating-task/Negative_ICCs_9_13_24.png")
create_histogram(results, c("posmusicICC", "pospicICC"),
"Positive Emotions - Granularity Scores (Fisher r to z)",
"../results/rating-task/Positive_ICCs_9_13_24.png")
create_histogram(results, c("allmusicICC", "allpicICC"),
"All Emotions - Granularity Scores (Fisher r to z)",
"../results/rating-task/Combined_ICCs_9_13_24.png")
# Plotting histograms - recoded
create_histogram(results_recode, c("negmusicICC", "negpicICC"),
"Negative Emotions - Granularity Scores (Fisher r to z) (Scores > 1 Recoded)",
"../results/rating-task/Negative_ICCs_Recoded_9_13_24.png")
create_histogram(results_recode, c("posmusicICC", "pospicICC"),
"Positive Emotions - Granularity Scores (Fisher r to z) (Scores > 1 Recoded)",
"../results/rating-task/Positive_ICCs_Recoded_9_13_24.png")
create_histogram(results_recode, c("allmusicICC", "allpicICC"),
"All Emotions - Granularity Scores (Fisher r to z) (Scores > 1 Recoded)",
"../results/rating-task/Combined_ICCs_Recoded_9_13_24.png")
# Plotting correlation scatter plots
create_scatter_plot(results, "negpicICC", "negmusicICC",
"Negative Emotion Granularity (Pictures)",
"Negative Emotion Granularity (Music)",
"Correlation of Negative Emotion Granularity Scores (Fisher r to z)",
"../results/rating-task/Neg_Graph_9_13_24.png")
create_scatter_plot(results, "pospicICC", "posmusicICC",
"Positive Emotion Granularity (Pictures)",
"Positive Emotion Granularity (Music)",
"Correlation of Positive Emotion Granularity Scores (Fisher r to z)",
"../results/rating-task/Pos_Graph_9_13_24.png")
create_scatter_plot(results, "allpicICC", "allmusicICC",
"Combined Emotion Granularity (Pictures)",
"Combined Emotion Granularity (Music)",
"Correlation of Combined Emotion Granularity Scores (Fisher r to z)",
"../results/rating-task/Combined_Graph_9_13_24.png")
# Plotting correlation scatter plots - Recoded
create_scatter_plot(results_recode, "negpicICC", "negmusicICC",
"Negative Emotion Granularity (Pictures)",
"Negative Emotion Granularity (Music)",
"Correlation of Negative Emotion Granularity Scores (Fisher r to z) (Scores > 1 Recoded)",
"../results/rating-task/Neg_Graph_Recoded_9_13_24.png")
create_scatter_plot(results_recode, "pospicICC", "posmusicICC",
"Positive Emotion Granularity (Pictures)",
"Positive Emotion Granularity (Music)",
"Correlation of Positive Emotion Granularity Scores (Fisher r to z) (Scores > 1 Recoded)",
"../results/rating-task/Pos_Graph_Recoded_9_13_24.png")
create_scatter_plot(results_recode, "allpicICC", "allmusicICC",
"Combined Emotion Granularity (Pictures)",
"Combined Emotion Granularity (Music)",
"Correlation of Combined Emotion Granularity Scores (Fisher r to z) (Scores > 1 Recoded)",
"../results/rating-task/Combined_Graph_Recoded_9_13_24.png")
# Function to perform correlations and paired t-tests
run_tests <- function(data, label) {
cat(paste0("Results for ", label, ":\n"))
cat("Correlations:\n")
cor.test(data$posmusicICC, data$pospicICC) %>% print()
cor.test(data$negmusicICC, data$negpicICC) %>% print()
cor.test(data$allmusicICC, data$allpicICC) %>% print()
cat("\nPaired T-tests:\n")
t.test(data$posmusicICC, data$pospicICC, paired = TRUE) %>% print()
t.test(data$negmusicICC, data$negpicICC, paired = TRUE) %>% print()
t.test(data$allmusicICC, data$allpicICC, paired = TRUE) %>% print()
}
# Function to create and save mean comparison plot
create_mean_comparison_plot <- function(data, title, output_file) {
mean_comparison <- data %>%
pivot_longer(negmusicICC:pospicICC) %>%
ggplot(aes(x = name, y = value)) +
stat_summary(fun.data = 'mean_cl_normal', geom = 'errorbar', width = 0.2) +
stat_summary(fun.data = 'mean_cl_normal', geom = 'pointrange', width = 0.2) +
theme_bw() +
xlab('Stimulus and Valence') +
ylab('Average Emotion Granularity') +
ggtitle(title) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12)) +
scale_x_discrete(labels = c('Negative Music', 'Negative Picture', 'Positive Music', 'Positive Picture'))
ggsave(output_file, mean_comparison, width = 9)
}
# Run tests and create plots for non-recoded data
run_tests(results, "Non-Recoded Data")
create_mean_comparison_plot(results,
'Average Granularity Scores by Stimulus Type/Valence (Fisher r to z)',
'../results/rating-task/Mean_Comparisons_9_13_24.png')
# Run tests and create plots for recoded data
run_tests(results_recode, "Recoded Data")
create_mean_comparison_plot(results_recode,
'Average Granularity Scores by Stimulus Type/Valence (Fisher r to z) (Scores > 1 Recoded)',
'../results/rating-task/Mean_Comparisons_Recoded_9_13_24.png')
# Function to calculate effect size (Cohen's d)
effect_size <- function(x, y) {
mean_diff <- mean(x - y, na.rm = TRUE)
sd_diff <- sd(x - y, na.rm = TRUE)
return(mean_diff / sd_diff)
}
# Function to perform power analysis for paired t-tests
power_analysis_t_test <- function(x, y, alpha = 0.05, power = 0.80) {
d <- effect_size(x, y)
sample_size <- pwr.t.test(d = d, power = power, sig.level = alpha, type = "paired")$n
return(list(effect_size = d, sample_size = ceiling(sample_size)))
}
# Function to perform power analysis for correlations with clear output
power_analysis_correlation <- function(x, y, alpha = 0.05, power = 0.80) {
cor_test <- cor.test(x, y, method = "pearson")
r <- cor_test$estimate
power_analysis <- pwr.r.test(r = r, sig.level = alpha, power = power)
sample_size <- ceiling(power_analysis$n)
# Displaying the result in a clear output
cat("Correlation Analysis:\n")
cat("Correlation coefficient (r):", round(r, 2), "\n")
cat("Required sample size for 80% power:", sample_size, "\n")
cat("Power analysis details:\n")
print(power_analysis)
return(list(correlation = r, sample_size = sample_size, power_analysis = power_analysis))
}
# Power analysis for positive granularity scores
pos_t_test <- power_analysis_t_test(results$posmusicICC, results$pospicICC)
paste("Effect size for positive granularity: ", round(pos_t_test$effect_size, 2),
"--> N =", pos_t_test$sample_size, "for 80% power.")
# Power analysis for negative granularity scores
neg_t_test <- power_analysis_t_test(results$negmusicICC, results$negpicICC)
paste("Effect size for negative granularity: ", round(neg_t_test$effect_size, 2),
"--> N =", neg_t_test$sample_size, "for 80% power.")
# Power analysis for combined granularity scores
all_t_test <- power_analysis_t_test(results$allmusicICC, results$allpicICC)
paste("Effect size for combined granularity: ", round(all_t_test$effect_size, 2),
"--> N =", all_t_test$sample_size, "for 80% power.")
# Power analysis for correlations with clear output
cat("\nNegative Granularity Correlation Analysis:\n")
neg_corr_analysis <- power_analysis_correlation(results$negmusicICC, results$negpicICC)
cat("\nPositive Granularity Correlation Analysis:\n")
pos_corr_analysis <- power_analysis_correlation(results$posmusicICC, results$pospicICC)
cat("\nCombined Granularity Correlation Analysis:\n")
all_corr_analysis <- power_analysis_correlation(results$allmusicICC, results$allpicICC)
#### FOR RECODED SCORES
# Power analysis for positive granularity scores
print('FOR RECODED SCORES')
pos_t_test_recode <- power_analysis_t_test(results_recode$posmusicICC, results_recode$pospicICC)
paste("Effect size for positive granularity: ", round(pos_t_test_recode$effect_size, 2),
"--> N =", pos_t_test_recode$sample_size, "for 80% power.")
# Power analysis for negative granularity scores
neg_t_test_recode <- power_analysis_t_test(results_recode$negmusicICC, results_recode$negpicICC)
paste("Effect size for negative granularity: ", round(neg_t_test_recode$effect_size, 2),
"--> N =", neg_t_test_recode$sample_size, "for 80% power.")
# Power analysis for combined granularity scores
all_t_test_recode <- power_analysis_t_test(results_recode$allmusicICC, results_recode$allpicICC)
paste("Effect size for combined granularity: ", round(all_t_test_recode$effect_size, 2),
"--> N =", all_t_test_recode$sample_size, "for 80% power.")
# Power analysis for correlations with clear output
cat("\nNegative Granularity Correlation Analysis:\n")
neg_corr_analysis_recode <- power_analysis_correlation(results_recode$negmusicICC, results_recode$negpicICC)
cat("\nPositive Granularity Correlation Analysis:\n")
pos_corr_analysis_recode <- power_analysis_correlation(results_recode$posmusicICC, results_recode$pospicICC)
cat("\nCombined Granularity Correlation Analysis:\n")
all_corr_analysis_recode <- power_analysis_correlation(results_recode$allmusicICC, results_recode$allpicICC)
# Function 1: ICC with Fisher transformation (without recoding)
compute_icc_fisher <- function(data_list) {
sapply(data_list, function(data) {
icc_result <- data %>%
select(-Participant.Public.ID) %>%
icc(model = "twoway", type = "consistency", unit = "average")
fisherz(-1 * icc_result$value)  # Fisher transform and reverse score
})
}
# Function 2: ICC with Fisher transformation and recoding of negative correlations
compute_icc_fisher_recode <- function(data_list) {
sapply(data_list, function(data) {
icc_result <- data %>%
select(-Participant.Public.ID) %>%
icc(model = "twoway", type = "consistency", unit = "average")
# Recode correlations less than 0 as 0
icc_value <- ifelse(icc_result$value < 0, 0, icc_result$value)
# Fisher transformation and reverse scoring
fisherz(-1 * icc_value)
})
}
# Create lists of data frames split by Participant.Public.ID
music_negative_list <- split(music_negative, music_negative$Participant.Public.ID)
music_positive_list <- split(music_positive, music_positive$Participant.Public.ID)
pic_negative_list <- split(pic_negative, pic_negative$Participant.Public.ID)
pic_positive_list <- split(pic_positive, pic_positive$Participant.Public.ID)
### Result DataFrame 1: Using ICC with Fisher transformation
results <- data.frame(ID = names(music_negative_list))
results$negmusicICC <- compute_icc_fisher(music_negative_list)
results$posmusicICC <- compute_icc_fisher(music_positive_list)
results$negpicICC <- compute_icc_fisher(pic_negative_list)
results$pospicICC <- compute_icc_fisher(pic_positive_list)
results$allmusicICC <- rowMeans(results[, c("negmusicICC", "posmusicICC")], na.rm = TRUE)
results$allpicICC <- rowMeans(results[, c("negpicICC", "pospicICC")], na.rm = TRUE)
### Result DataFrame 2: Using ICC with Fisher transformation and recoding
results_recode <- data.frame(ID = names(music_negative_list))
results_recode$negmusicICC <- compute_icc_fisher_recode(music_negative_list)
results_recode$posmusicICC <- compute_icc_fisher_recode(music_positive_list)
results_recode$negpicICC <- compute_icc_fisher_recode(pic_negative_list)
results_recode$pospicICC <- compute_icc_fisher_recode(pic_positive_list)
results_recode$allmusicICC <- rowMeans(results_recode[, c("negmusicICC", "posmusicICC")], na.rm = TRUE)
results_recode$allpicICC <- rowMeans(results_recode[, c("negpicICC", "pospicICC")], na.rm = TRUE)
# Function to create histogram plots
create_histogram <- function(data, key_vars, title, output_file) {
df_long <- data %>%
gather(key = "Variable", value = "Value", all_of(key_vars))
hist_plot <- ggplot(df_long, aes(x = Value, fill = Variable)) +
geom_histogram(position = "identity", alpha = 0.5) +
labs(title = title, x = "Granularity Score", y = "Count") +
theme_classic()
ggsave(output_file, hist_plot, width = 14)
}
# Function to create correlation scatter plots with linear model fit
create_scatter_plot <- function(data, x_var, y_var, x_label, y_label, title, output_file) {
scatter_plot <- ggplot(data, aes(x = !!ensym(x_var), y = !!ensym(y_var))) +
geom_point() +
stat_smooth(method = 'lm', formula = y ~ x) +
xlab(x_label) +
ylab(y_label) +
ggtitle(title) +
theme_classic() +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16, face = 'bold', hjust = 0.5))
ggsave(output_file, scatter_plot, width = 10)
}
# Plotting histograms
create_histogram(results, c("negmusicICC", "negpicICC"),
"Negative Emotions - Granularity Scores (Fisher r to z)",
"../results/rating-task/Negative_ICCs_9_13_24.png")
create_histogram(results, c("posmusicICC", "pospicICC"),
"Positive Emotions - Granularity Scores (Fisher r to z)",
"../results/rating-task/Positive_ICCs_9_13_24.png")
create_histogram(results, c("allmusicICC", "allpicICC"),
"All Emotions - Granularity Scores (Fisher r to z)",
"../results/rating-task/Combined_ICCs_9_13_24.png")
# Plotting histograms - recoded
create_histogram(results_recode, c("negmusicICC", "negpicICC"),
"Negative Emotions - Granularity Scores (Fisher r to z) (Scores > 1 Recoded)",
"../results/rating-task/Negative_ICCs_Recoded_9_13_24.png")
create_histogram(results_recode, c("posmusicICC", "pospicICC"),
"Positive Emotions - Granularity Scores (Fisher r to z) (Scores > 1 Recoded)",
"../results/rating-task/Positive_ICCs_Recoded_9_13_24.png")
create_histogram(results_recode, c("allmusicICC", "allpicICC"),
"All Emotions - Granularity Scores (Fisher r to z) (Scores > 1 Recoded)",
"../results/rating-task/Combined_ICCs_Recoded_9_13_24.png")
# Plotting correlation scatter plots
create_scatter_plot(results, "negpicICC", "negmusicICC",
"Negative Emotion Granularity (Pictures)",
"Negative Emotion Granularity (Music)",
"Correlation of Negative Emotion Granularity Scores (Fisher r to z)",
"../results/rating-task/Neg_Graph_9_13_24.png")
create_scatter_plot(results, "pospicICC", "posmusicICC",
"Positive Emotion Granularity (Pictures)",
"Positive Emotion Granularity (Music)",
"Correlation of Positive Emotion Granularity Scores (Fisher r to z)",
"../results/rating-task/Pos_Graph_9_13_24.png")
create_scatter_plot(results, "allpicICC", "allmusicICC",
"Combined Emotion Granularity (Pictures)",
"Combined Emotion Granularity (Music)",
"Correlation of Combined Emotion Granularity Scores (Fisher r to z)",
"../results/rating-task/Combined_Graph_9_13_24.png")
# Plotting correlation scatter plots - Recoded
create_scatter_plot(results_recode, "negpicICC", "negmusicICC",
"Negative Emotion Granularity (Pictures)",
"Negative Emotion Granularity (Music)",
"Correlation of Negative Emotion Granularity Scores (Fisher r to z) (Scores > 1 Recoded)",
"../results/rating-task/Neg_Graph_Recoded_9_13_24.png")
create_scatter_plot(results_recode, "pospicICC", "posmusicICC",
"Positive Emotion Granularity (Pictures)",
"Positive Emotion Granularity (Music)",
"Correlation of Positive Emotion Granularity Scores (Fisher r to z) (Scores > 1 Recoded)",
"../results/rating-task/Pos_Graph_Recoded_9_13_24.png")
create_scatter_plot(results_recode, "allpicICC", "allmusicICC",
"Combined Emotion Granularity (Pictures)",
"Combined Emotion Granularity (Music)",
"Correlation of Combined Emotion Granularity Scores (Fisher r to z) (Scores > 1 Recoded)",
"../results/rating-task/Combined_Graph_Recoded_9_13_24.png")
