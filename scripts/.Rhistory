music_negative <- apply_filter(granularity_music, emotions$neg, "Audio")
View(granularity_music)
# List of emotions
emotions <- list(
neg = c("Gloomy", "Sad", "Scared", "Anxious", "Upset"),
pos = c("Happy", "Satisfied", "Excited", "Joyful", "Relaxed")
)
# Function to filter and rename
filter_and_rename <- function(data, emotion, media_type, keep_id = FALSE) {
columns_to_select <- if (keep_id) {
c("Participant.Public.ID", "Response")
} else {
c("Response")
}
data %>%
filter(Object.Name == paste(emotion, "Slider")) %>%
#select(-c(paste0("Spreadsheet..", media_type), "Object.Name")) %>%
select(all_of(columns_to_select)) %>%
rename(!!tolower(emotion) := "Response")
}
# General function to apply filtering to both media types and emotion types
apply_filter <- function(data, emotions, media_type) {
lapply(seq_along(emotions), function(i) {
filter_and_rename(data, emotions[i], media_type, keep_id = (i == 1))
}) %>% bind_cols() %>% na.omit()
}
# Apply the process for each combination of data and emotion types
music_negative <- apply_filter(granularity_music, emotions$neg, "Audio")
music_positive <- apply_filter(granularity_music, emotions$pos, "Audio")
pic_negative <- apply_filter(granularity_pic, emotions$neg, "Image")
pic_positive <- apply_filter(granularity_pic, emotions$pos, "Image")
View(pic_negative)
View(music_negative)
View(granularity_music)
granularity_music %>%
distinct(Participant.Public.ID,Spreadsheet..Audio)
# Apply the process for each combination of data and emotion types
music_negative <- apply_filter(granularity_music, emotions$neg, "Audio")
music_positive <- apply_filter(granularity_music, emotions$pos, "Audio")
pic_negative <- apply_filter(granularity_pic, emotions$neg, "Image")
pic_positive <- apply_filter(granularity_pic, emotions$pos, "Image")
granularity_music_labels <-
granularity_music %>%
distinct(Participant.Public.ID,Spreadsheet..Audio)
granularity_pic_labels <-
granularity_pic %>%
distinct(Participant.Public.ID,Spreadsheet..Audio)
granularity_pic_labels <-
granularity_pic %>%
distinct(Participant.Public.ID,Spreadsheet..Image)
rbind(music_negative,granularity_music_labels)
cbind(music_negative,granularity_music_labels)
cbind(music_negative,granularity_music_labels[2])
music_negative <- cbind(music_negative,granularity_music_labels[2])
# ICC with Fisher transformation and recoding of negative correlations
compute_icc_fisher_recode <- function(data_list) {
sapply(data_list, function(data) {
icc_result <- data %>%
select(-Participant.Public.ID) %>%
icc(model = "twoway", type = "consistency", unit = "average")
# Recode correlations less than 0 as 0
icc_value <- ifelse(icc_result$value < 0, 0, icc_result$value)
# Fisher transformation and reverse scoring
-1 * fisherz(icc_value)
})
}
# Create lists of data frames split by Participant.Public.ID
music_negative_list <- split(music_negative, music_negative$Participant.Public.ID)
music_positive_list <- split(music_positive, music_positive$Participant.Public.ID)
pic_negative_list <- split(pic_negative, pic_negative$Participant.Public.ID)
pic_positive_list <- split(pic_positive, pic_positive$Participant.Public.ID)
###
results_recode <- data.frame(ID = names(music_negative_list))
results_recode$negmusicICC <- compute_icc_fisher_recode(music_negative_list)
results_recode$posmusicICC <- compute_icc_fisher_recode(music_positive_list)
results_recode$negpicICC <- compute_icc_fisher_recode(pic_negative_list)
results_recode$pospicICC <- compute_icc_fisher_recode(pic_positive_list)
results_recode$allmusicICC <- rowMeans(results_recode[, c("negmusicICC", "posmusicICC")], na.rm = TRUE)
results_recode$allpicICC <- rowMeans(results_recode[, c("negpicICC", "pospicICC")], na.rm = TRUE)
View(results_recode)
library(lmerTest)
library(tidyverse)
if (!(require("psych"))) install.packages("psych"); require("psych")
if (!require("irr")) {install.packages("irr"); require("irr")}
# Old v23 data + v25 080, v26 082, 083, 084, 085, and v27 077
data_23 <- read.csv("../data/rating-task/v23/data_exp_169297-v23_task-6dig.csv")
data_25 <- read.csv("../data/rating-task/v25/data_exp_169297-v25_task-6dig.csv")
data_26 <- read.csv("../data/rating-task/v26/data_exp_169297-v26_task-6dig.csv")
data_27 <- read.csv("../data/rating-task/v27/data_exp_169297-v27_task-6dig.csv")
granularity_data_23 <- granularity_data_23 %>%
filter(Participant.Public.ID != "TEAM_YA_028") %>%
filter(Participant.Public.ID != "TEAM_YA_045") %>%
filter(Participant.Public.ID != "32578")
## 32578 is missing response data for 6_5.mp3 for some reason
granularity_data_25 <-granularity_data_25 %>%
filter(Participant.Public.ID == "TEAM_YA_080")
granularity_data_26 <-granularity_data_26 %>%
filter(Participant.Public.ID == "TEAM_YA_082" | Participant.Public.ID == "TEAM_YA_083" | Participant.Public.ID == "TEAM_YA_084" | Participant.Public.ID == "TEAM_YA_085")
granularity_data_27 <-granularity_data_27 %>%
filter(Participant.Public.ID == "TEAM_YA_077")
granularity_data <- bind_rows(granularity_data_23, granularity_data_25, granularity_data_26, granularity_data_27)
## Separating by picture vs music, removing practice stims
granularity_pic <- granularity_data %>%
filter(Spreadsheet..Image != "") %>%
filter(Spreadsheet..Image != "Coffee 1.jpg") %>%
select(-c("Spreadsheet..Audio"))
granularity_music <- granularity_data %>%
filter(Spreadsheet..Audio != "") %>%
filter(Spreadsheet..Audio != "8_pieceA_dreamy_calm_joyous_1.mp3") %>%
select(-c("Spreadsheet..Image"))
# List of emotions
emotions <- list(
neg = c("Gloomy", "Sad", "Scared", "Anxious", "Upset"),
pos = c("Happy", "Satisfied", "Excited", "Joyful", "Relaxed")
)
# Function to filter and rename
filter_and_rename <- function(data, emotion, media_type, keep_id = FALSE) {
columns_to_select <- if (keep_id) {
c("Participant.Public.ID", "Response")
} else {
c("Response")
}
data %>%
filter(Object.Name == paste(emotion, "Slider")) %>%
select(-c(paste0("Spreadsheet..", media_type), "Object.Name")) %>%
select(all_of(columns_to_select)) %>%
rename(!!tolower(emotion) := "Response")
}
# General function to apply filtering to both media types and emotion types
apply_filter <- function(data, emotions, media_type) {
lapply(seq_along(emotions), function(i) {
filter_and_rename(data, emotions[i], media_type, keep_id = (i == 1))
}) %>% bind_cols() %>% na.omit()
}
# Apply the process for each combination of data and emotion types
music_negative <- apply_filter(granularity_music, emotions$neg, "Audio")
music_positive <- apply_filter(granularity_music, emotions$pos, "Audio")
pic_negative <- apply_filter(granularity_pic, emotions$neg, "Image")
pic_positive <- apply_filter(granularity_pic, emotions$pos, "Image")
# ICC with Fisher transformation and recoding of negative correlations
compute_icc_fisher_recode <- function(data_list) {
sapply(data_list, function(data) {
icc_result <- data %>%
select(-Participant.Public.ID) %>%
icc(model = "twoway", type = "consistency", unit = "average")
# Recode correlations less than 0 as 0
icc_value <- ifelse(icc_result$value < 0, 0, icc_result$value)
# Fisher transformation and reverse scoring
-1 * fisherz(icc_value)
})
}
# Create lists of data frames split by Participant.Public.ID
music_negative_list <- split(music_negative, music_negative$Participant.Public.ID)
music_positive_list <- split(music_positive, music_positive$Participant.Public.ID)
pic_negative_list <- split(pic_negative, pic_negative$Participant.Public.ID)
pic_positive_list <- split(pic_positive, pic_positive$Participant.Public.ID)
###
results_recode <- data.frame(ID = names(music_negative_list))
results_recode$negmusicICC <- compute_icc_fisher_recode(music_negative_list)
results_recode$posmusicICC <- compute_icc_fisher_recode(music_positive_list)
results_recode$negpicICC <- compute_icc_fisher_recode(pic_negative_list)
results_recode$pospicICC <- compute_icc_fisher_recode(pic_positive_list)
results_recode$allmusicICC <- rowMeans(results_recode[, c("negmusicICC", "posmusicICC")], na.rm = TRUE)
results_recode$allpicICC <- rowMeans(results_recode[, c("negpicICC", "pospicICC")], na.rm = TRUE)
granularity_music_labels <-
granularity_music %>%
distinct(Participant.Public.ID,Spreadsheet..Audio)
granularity_pic_labels <-
granularity_pic %>%
distinct(Participant.Public.ID,Spreadsheet..Image)
music_negative <- cbind(music_negative,granularity_music_labels[2])
music_positive <- cbind(music_positive,granularity_music_labels[2])
pic_negative <- cbind(pic_negative,granularity_pic_labels[2])
pic_positive <- cbind(pic_positive,granularity_pic_labels[2])
View(pic_positive)
View(music_negative)
granularity_music_labels <-
granularity_music %>%
distinct(Participant.Public.ID,Spreadsheet..Audio)
granularity_pic_labels <-
granularity_pic %>%
distinct(Participant.Public.ID,Spreadsheet..Image)
music_negative <- cbind(music_negative,granularity_music_labels[2])
names(music_negative)[7] <- "stim"
music_negative$condition <- "music"
music_positive <- cbind(music_positive,granularity_music_labels[2])
music_positive$condition <- "music"
names(music_positive)[7] <- "stim"
pic_negative <- cbind(pic_negative,granularity_pic_labels[2])
names(pic_negative)[7] <- "stim"
pic_negative$condition <- "pic"
pic_positive <- cbind(pic_positive,granularity_pic_labels[2])
names(pic_positive)[7] <- "stim"
pic_positive$condition <- "pic"
granularity_music_labels <-
granularity_music %>%
distinct(Participant.Public.ID,Spreadsheet..Audio)
granularity_pic_labels <-
granularity_pic %>%
distinct(Participant.Public.ID,Spreadsheet..Image)
music_negative <- cbind(music_negative,granularity_music_labels[2])
View(music_negative)
# List of emotions
emotions <- list(
neg = c("Gloomy", "Sad", "Scared", "Anxious", "Upset"),
pos = c("Happy", "Satisfied", "Excited", "Joyful", "Relaxed")
)
# Function to filter and rename
filter_and_rename <- function(data, emotion, media_type, keep_id = FALSE) {
columns_to_select <- if (keep_id) {
c("Participant.Public.ID", "Response")
} else {
c("Response")
}
data %>%
filter(Object.Name == paste(emotion, "Slider")) %>%
select(-c(paste0("Spreadsheet..", media_type), "Object.Name")) %>%
select(all_of(columns_to_select)) %>%
rename(!!tolower(emotion) := "Response")
}
# General function to apply filtering to both media types and emotion types
apply_filter <- function(data, emotions, media_type) {
lapply(seq_along(emotions), function(i) {
filter_and_rename(data, emotions[i], media_type, keep_id = (i == 1))
}) %>% bind_cols() %>% na.omit()
}
# Apply the process for each combination of data and emotion types
music_negative <- apply_filter(granularity_music, emotions$neg, "Audio")
music_positive <- apply_filter(granularity_music, emotions$pos, "Audio")
pic_negative <- apply_filter(granularity_pic, emotions$neg, "Image")
pic_positive <- apply_filter(granularity_pic, emotions$pos, "Image")
granularity_music_labels <-
granularity_music %>%
distinct(Participant.Public.ID,Spreadsheet..Audio)
granularity_pic_labels <-
granularity_pic %>%
distinct(Participant.Public.ID,Spreadsheet..Image)
music_negative <- cbind(music_negative,granularity_music_labels[2])
names(music_negative)[7] <- "stim"
music_negative$condition <- "music"
music_positive <- cbind(music_positive,granularity_music_labels[2])
music_positive$condition <- "music"
names(music_positive)[7] <- "stim"
pic_negative <- cbind(pic_negative,granularity_pic_labels[2])
names(pic_negative)[7] <- "stim"
pic_negative$condition <- "pic"
pic_positive <- cbind(pic_positive,granularity_pic_labels[2])
names(pic_positive)[7] <- "stim"
pic_positive$condition <- "pic"
View(music_negative)
rbind(pic_negative,pic_positive)
cbind(pic_negative,pic_positive)
cbind(pic_negative,music_negative)
rbind(pic_negative,music_negative)
negative_ratings <- rbind(pic_negative,music_negative)
positive_ratings <- rbind(pic_positive,music_positive)
write.csv(file = '../data/study1_negativeratings.csv',negative_ratings)
write.csv(file = '../data/study1_positiveratings.csv',positive_ratings)
write.csv(file = '../data/study1_granularityscores.csv',results_recode)
granularity_scores <- read.csv(file='../data/study1_granularityscores.csv')
#granularity across pics + music
##positive
cor.test(granularity_scores$posmusicICC, granularity_scores$pospicICC)
##negative
cor.test(granularity_scores$negmusicICC, granularity_scores$negpicICC)
##combined
cor.test(granularity_scores$allmusicICC, granularity_scores$allpicICC)
#granularity across pics + music
##positive
t.test(granularity_scores$posmusicICC, granularity_scores$pospicICC, paired=TRUE)
##negative
t.test(granularity_scores$negmusicICC, granularity_scores$negpicICC)
##negative
t.test(granularity_scores$negmusicICC, granularity_scores$negpicICC, paired=TRUE)
##combined
t.test(granularity_scores$allmusicICC, granularity_scores$allpicICC, paired=TRUE)
neg_ratings <- read.csv(file='../data/study1_negativeratings.csv')
pos_ratings <- read.csv(file='../data/study1_positiveratings.csv')
View(pos_ratings)
View(granularity_scores)
View(pos_ratings)
pos_ratings %>%
group_by(Participant.Public.ID) %>%
dplyr::summarize(cor = cor(relaxed, excited, na.rm=TRUE))
cor(pos_ratings$relaxed, pos_ratings$excited)
pos_ratings %>%
group_by(Participant.Public.ID) %>%
dplyr::summarize(cor = cor(relaxed, excited))
pos_ratings %>%
group_by(Participant.Public.ID, condiiton) %>%
dplyr::summarize(cor = cor(relaxed, excited))
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(relaxed, excited))
#relaxed, excited, satisfied, happy, joyful
relaxed_excited_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(relaxed, excited))
relaxed_joyful_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(relaxed, joful))
relaxed_joyful_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(relaxed, joyful))
relaxed_excited_cor_pics <- relaxed_excited_cor %>%
subset(condition == "pic")
relaxed_excited_cor_music <- relaxed_excited_cor %>%
subset(condition == "music")
t.test(relaxed_excited_cor_music$cor, relaxed_excited_cor_pics$condition, paired=TRUE)
t.test(relaxed_excited_cor_music$cor, relaxed_excited_cor_pics$cor, paired=TRUE)
View(relaxed_excited_cor)
relaxed_joyful_cor_pics <- relaxed_joyful_cor %>%
subset(condition == "pic")
relaxed_joyful_cor_music <- relaxed_joyful_cor %>%
subset(condition == "music")
t.test(relaxed_joyful_cor_music$cor, relaxed_joyful_cor_pics$cor, paired=TRUE)
#check w/ two low arousal emotions
relaxed_satisfied_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(relaxed, satisfied))
relaxed_satisfied_cor_pics <- relaxed_satisfied_cor %>%
subset(condition == "pic")
relaxed_satisfied_cor_music <- relaxed_satisfied_cor %>%
subset(condition == "music")
t.test(relaxed_satisfied_cor$cor, relaxed_satisfied_cor$cor, paired=TRUE)
t.test(relaxed_satisfied_cor_music$cor, relaxed_satisfied_cor_pics$cor, paired=TRUE)
#check w/ two low arousal emotions...hmmm
joyful_satisfied_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(joyful, satisfied))
joyful_satisfied_cor_pics <- joyful_satisfied_cor %>%
subset(condition == "pic")
joyful_satisfied_cor_music <- relaxed_satisfied_cor %>%
subset(condition == "music")
t.test(joyful_satisfied_cor_music$cor, joyful_satisfied_cor_pics$cor, paired=TRUE)
#check w/ two low arousal emotions...hmmm
joyful_happy_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(joyful, happy))
joyful_happy_cor_pics <- joyful_happy_cor %>%
subset(condition == "pic")
joyful_happy_cor_music <- joyful_happy_cor %>%
subset(condition == "music")
t.test(joyful_happy_cor_music$cor, joyful_happy_cor_pics$cor, paired=TRUE)
lmer(data=joyful_happy_cor, cor ~ condition + (1|condition))
lmer(data=joyful_happy_cor, cor ~ condition + (1|Participant.Public.ID))
test <- lmer(data=joyful_happy_cor, cor ~ condition + (1|Participant.Public.ID))
summary(test)
t.test(joyful_happy_cor_music$cor, joyful_happy_cor_pics$cor, paired=TRUE)
test <- lmer(data=joyful_happy_cor, cor ~ condition + (condition|Participant.Public.ID))
test <- lmer(data=joyful_happy_cor, cor ~ condition + (1|Participant.Public.ID))
summary(test)
t.test(relaxed_joyful_cor_music$cor, relaxed_joyful_cor_pics$cor, paired=TRUE)
test <- lmer(data=relaxed_joyful_cor, cor ~ condition + (1|Participant.Public.ID))
summary(test)
test <- lmer(data=relaxed_joyful_cor, cor ~ condition + (cor|Participant.Public.ID))
summary(test)
#relaxed - satisfied
relaxed_satisfied_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(relaxed, satisfied))
relaxed_satisfied_cor_pics <- relaxed_satisfied_cor %>%
subset(condition == "pic")
relaxed_satisfied_cor_music <- relaxed_satisfied_cor %>%
subset(condition == "music")
t.test(relaxed_satisfied_cor_music$cor, relaxed_satisfied_cor_pics$cor, paired=TRUE)
#relaxed - happy
relaxed_happy_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(relaxed, happy))
relaxed_happy_cor_pics <- relaxed_happy_cor %>%
subset(condition == "pic")
relaxed_happy_cor_music <- relaxed_happy_cor %>%
subset(condition == "music")
t.test(relaxed_happy_cor_music$cor, relaxed_happy_cor_pics$cor, paired=TRUE)
#excited - satisfied
excited_satisfied_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(excited, satisfied))
excited_satisfied_cor_pics <- excited_satisfied_cor %>%
subset(condition == "pic")
excited_satisfied_cor_music <- excited_satisfied_cor %>%
subset(condition == "music")
t.test(excited_satisfied_cor_music$cor, excited_satisfied_cor_pics$cor, paired=TRUE)
#excited - happy
excited_happy_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(excited, happy))
excited_happy_cor_pics <- excited_happy_cor %>%
subset(condition == "pic")
excited_happy_cor_music <- excited_happy_cor %>%
subset(condition == "music")
t.test(excited_happy_cor_music$cor, excited_happy_cor_pics$cor, paired=TRUE)
#excited - joyful
excited_joyful_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(excited, joyful))
excited_joyful_cor_pics <- excited_joyful_cor %>%
subset(condition == "pic")
excited_joyful_cor_music <- excited_joyful_cor %>%
subset(condition == "music")
t.test(excited_joyful_cor_music$cor, excited_joyful_cor_pics$cor, paired=TRUE)
#satisfied - happy
satisfied_happy_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(satisfied, happy))
satisfied_happy_cor_pics <- satisfied_happy_cor %>%
subset(condition == "pic")
satisfied_happy_cor_music <- satisfied_happy_cor %>%
subset(condition == "music")
t.test(satisfied_happy_cor_music$cor, satisfied_happy_cor_pics$cor, paired=TRUE)
#satisfied - joyful
satisfied_joyful_cor <-
pos_ratings %>%
group_by(Participant.Public.ID, condition) %>%
dplyr::summarize(cor = cor(satisfied, joyful))
satisfied_joyful_cor_pics <- satisfied_joyful_cor %>%
subset(condition == "pic")
satisfied_joyful_cor_music <- satisfied_joyful_cor %>%
subset(condition == "music")
t.test(satisfied_joyful_cor_music$cor, satisfied_joyful_cor_pics$cor, paired=TRUE)
##Pos emotions
#relaxed (low), excited (high), satisfied (low), happy (low), joyful (high)
relaxed_excited_cor$arousal_dif <- "different"
relaxed_satisfied_cor$arousal_dif <- "same"
relaxed_happy_cor$arousal_dif <- "same"
relaxed_joyful_cor$arousal_dif <- "different"
excited_satisfied_cor$arousal_dif <- "same"
excited_happy_cor$arousal_dif <- "different"
excited_joyful_cor$arousal_dif <- "same"
satisfied_happy_cor$arousal_dif <- "same"
satisfied_joyful_cor$arousal_dif <- "different"
joyful_happy_cor$arousal_dif <- "different"
merge(relaxed_excited_cor, relaxed_satisfied_cor)
merge(relaxed_excited_cor, relaxed_satisfied_cor, by="Participant.Public.ID")
rbind(relaxed_excited_cor, relaxed_satisfied_cor)
rbind(relaxed_excited_cor, relaxed_satisfied_cor, relaxed_happy_cor, relaxed_joyful_cor,excited_satisfied_cor,excited_happy_cor,excited_joyful_cor,
satisfied_happy_cor,satisfied_joyful_cor,joyful_happy_cor)
master <- rbind(relaxed_excited_cor, relaxed_satisfied_cor, relaxed_happy_cor,
relaxed_joyful_cor,excited_satisfied_cor,excited_happy_cor,
excited_joyful_cor,satisfied_happy_cor,satisfied_joyful_cor,
joyful_happy_cor)
test <- lmer(data=master, cor ~ condition*arousal_dif + (1|Participant.Public.ID))
summary(test)
test <- lmer(data=master, cor ~ condition*arousal_dif + (1|Participant.Public.ID))
summary(test)
anova(test)
test <- lmer(data=master, scale(cor) ~ condition*arousal_dif + (1|Participant.Public.ID))
anova(test)
contrasts(master$condition) <- c(-0.5,0.5)
master$condition <- as.factor(master$condition)
contrasts(master$condition) <- c(-0.5,0.5)
master$arousal_dif <- as.factor(master$arousal_dif)
contrasts(master$arousal_dif) <- c(-0.5,0.5)
test <- lmer(data=master, scale(cor) ~ condition*arousal_dif + (1|Participant.Public.ID))
anova(test)
summary(test)
test <- lmer(data=master, scale(cor) ~ condition*arousal_dif + (condition*arousal_dif|Participant.Public.ID))
summary(test)
test <- lmer(data=master, scale(cor) ~ condition:arousal_dif + (condition*arousal_dif|Participant.Public.ID))
summary(test)
test <- lmer(data=master, scale(cor) ~ condition*arousal_dif + (condition|Participant.Public.ID))
summary(test)
test <- lmer(data=master, scale(cor) ~ condition*arousal_dif + (1|Participant.Public.ID))
summary(test)
View(master)
##Pos emotions
#relaxed (low), excited (high), satisfied (low), happy (high), joyful (high)
relaxed_excited_cor$arousal_dif <- "different"
relaxed_satisfied_cor$arousal_dif <- "same"
relaxed_happy_cor$arousal_dif <- "different"
relaxed_joyful_cor$arousal_dif <- "different"
excited_satisfied_cor$arousal_dif <- "different"
excited_happy_cor$arousal_dif <- "same"
excited_joyful_cor$arousal_dif <- "same"
satisfied_happy_cor$arousal_dif <- "different"
satisfied_joyful_cor$arousal_dif <- "different"
joyful_happy_cor$arousal_dif <- "same"
master <- rbind(relaxed_excited_cor, relaxed_satisfied_cor, relaxed_happy_cor,
relaxed_joyful_cor,excited_satisfied_cor,excited_happy_cor,
excited_joyful_cor,satisfied_happy_cor,satisfied_joyful_cor,
joyful_happy_cor)
master$condition <- as.factor(master$condition)
contrasts(master$condition) <- c(-0.5,0.5)
master$arousal_dif <- as.factor(master$arousal_dif)
contrasts(master$arousal_dif) <- c(-0.5,0.5)
test <- lmer(data=master, scale(cor) ~ condition*arousal_dif + (1|Participant.Public.ID))
summary(test)
test <- lmer(data=master, scale(cor) ~ condition*arousal_dif + (condition*arousal_dif|Participant.Public.ID))
summary(test)
ggplot(data=master, aes(x=arousal_dif, y=cor)) +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.2, alpha=0.7) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.7)
ggplot(data=master, aes(x=arousal_dif, y=cor, color=condition)) +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.2, alpha=0.7) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.7)
ggplot(data=master, aes(x=arousal_dif, y=cor, color=condition)) +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.05, alpha=0.7) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.7)+
theme_classic()
