# Merge to get start and end valence/arousal for each stimulus
extracted_sections <- stimulus_tracking %>%
left_join(portions, by = c("original.song" = "song", "start.time" = "second")) %>%
rename(Valence_Start = valence_filt, Arousal_Start = arousal_filt) %>%
left_join(portions, by = c("original.song" = "song", "end.time" = "second")) %>%
rename(Valence_End = valence_filt, Arousal_End = arousal_filt) %>%
select(original.song, Final.Label, Valence_Start, Arousal_Start, Valence_End, Arousal_End)
# Create a long-format dataframe for plotting
plot_data <- extracted_sections %>%
pivot_longer(cols = c(Valence_Start, Valence_End, Arousal_Start, Arousal_End),
names_to = c("Metric", "Type"),
names_pattern = "(.*)_(.*)") %>%
pivot_wider(names_from = Metric, values_from = value)
# Set shapes for start and end
plot_data$Shape <- ifelse(plot_data$Type == "Start", 15, 17)  # Square for start, triangle for end
# Define colors for different final.label categories
colors <- c("red", "blue", "green", "purple")
# 1st plot: Color-coded by `final.label`
color_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song, color = Final.Label)) +
geom_point(aes(shape = factor(Type)), size = 4) +
geom_line(size = 1) +
scale_shape_manual(values = c("Start" = 15, "End" = 17)) +  # Square and Triangle
scale_color_manual(values = colors) +
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank()) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# 2nd plot: Black and white version
bw_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song)) +
geom_point(aes(shape = factor(Type)), size = 4, color = "black") +
geom_line(size = 1, color = "black") +
scale_shape_manual(values = c("Start" = 15, "End" = 17)) +  # Square and Triangle
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank()) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# Save plots
ggsave("Color_Coded_Stimuli.pdf", plot = color_plot, width = 10, height = 10)
ggsave("Black_White_Stimuli.pdf", plot = bw_plot, width = 10, height = 10)
return(list(Color_Plot = color_plot, BW_Plot = bw_plot))
}
# Example usage
result <- process_data("../stimuli/sachs/SourceData_1.csv", "../stimuli/sachs/stims_v2/Final Stimuli Labeled.csv")
# Read stimulus tracking data
stimulus_tracking <- read.csv("../stimuli/sachs/stims_v2/Final Stimuli Labeled.csv")
# Function to process data and generate two plots
process_data <- function(portions_file, tracking_file) {
stimulus_tracking$start.time <- as.numeric(stimulus_tracking$start.time)
stimulus_tracking$end.time <- as.numeric(stimulus_tracking$end.time)
# Merge to get start and end valence/arousal for each stimulus
extracted_sections <- stimulus_tracking %>%
left_join(portions, by = c("original.song" = "song", "start.time" = "second")) %>%
rename(Valence_Start = valence_filt, Arousal_Start = arousal_filt) %>%
left_join(portions, by = c("original.song" = "song", "end.time" = "second")) %>%
rename(Valence_End = valence_filt, Arousal_End = arousal_filt) %>%
select(original.song, Final.Label, Valence_Start, Arousal_Start, Valence_End, Arousal_End)
# Create a long-format dataframe for plotting
plot_data <- extracted_sections %>%
pivot_longer(cols = c(Valence_Start, Valence_End, Arousal_Start, Arousal_End),
names_to = c("Metric", "Type"),
names_pattern = "(.*)_(.*)") %>%
pivot_wider(names_from = Metric, values_from = value)
# Set shapes for start and end
plot_data$Shape <- ifelse(plot_data$Type == "Start", 15, 17)  # Square for start, triangle for end
# Define colors for different final.label categories
colors <- c("red", "blue", "green", "purple")
# 1st plot: Color-coded by `final.label`
color_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song, color = Final.Label)) +
geom_point(aes(shape = factor(Type)), size = 4) +
geom_line(size = 1) +
scale_shape_manual(values = c("Start" = 15, "End" = 17)) +  # Square and Triangle
scale_color_manual(values = colors) +
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank()) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# 2nd plot: Black and white version
bw_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song)) +
geom_point(aes(shape = factor(Type)), size = 4, color = "black") +
geom_line(size = 1, color = "black") +
scale_shape_manual(values = c("Start" = 15, "End" = 17)) +  # Square and Triangle
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank()) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# Save plots
ggsave("Color_Coded_Stimuli.pdf", plot = color_plot, width = 10, height = 10)
ggsave("Black_White_Stimuli.pdf", plot = bw_plot, width = 10, height = 10)
return(list(Color_Plot = color_plot, BW_Plot = bw_plot))
}
# Example usage
result <- process_data(data, stimulus_tracking)
# Read stimulus tracking data
stimulus_tracking <- read.csv("../stimuli/sachs/stims_v2/Final Stimuli Labeled.csv")
# Function to process data and generate two plots
process_data <- function(portions_file, tracking_file) {
stimulus_tracking$start.time <- as.numeric(stimulus_tracking$start.time)
stimulus_tracking$end.time <- as.numeric(stimulus_tracking$end.time)
# Merge to get start and end valence/arousal for each stimulus
extracted_sections <- stimulus_tracking %>%
left_join(data, by = c("original.song" = "song", "start.time" = "second")) %>%
rename(Valence_Start = valence_filt, Arousal_Start = arousal_filt) %>%
left_join(data, by = c("original.song" = "song", "end.time" = "second")) %>%
rename(Valence_End = valence_filt, Arousal_End = arousal_filt) %>%
select(original.song, Final.Label, Valence_Start, Arousal_Start, Valence_End, Arousal_End)
# Create a long-format dataframe for plotting
plot_data <- extracted_sections %>%
pivot_longer(cols = c(Valence_Start, Valence_End, Arousal_Start, Arousal_End),
names_to = c("Metric", "Type"),
names_pattern = "(.*)_(.*)") %>%
pivot_wider(names_from = Metric, values_from = value)
# Set shapes for start and end
plot_data$Shape <- ifelse(plot_data$Type == "Start", 15, 17)  # Square for start, triangle for end
# Define colors for different final.label categories
colors <- c("red", "blue", "green", "purple")
# 1st plot: Color-coded by `final.label`
color_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song, color = Final.Label)) +
geom_point(aes(shape = factor(Type)), size = 4) +
geom_line(size = 1) +
scale_shape_manual(values = c("Start" = 15, "End" = 17)) +  # Square and Triangle
scale_color_manual(values = colors) +
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank()) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# 2nd plot: Black and white version
bw_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song)) +
geom_point(aes(shape = factor(Type)), size = 4, color = "black") +
geom_line(size = 1, color = "black") +
scale_shape_manual(values = c("Start" = 15, "End" = 17)) +  # Square and Triangle
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank()) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# Save plots
ggsave("Color_Coded_Stimuli.pdf", plot = color_plot, width = 10, height = 10)
ggsave("Black_White_Stimuli.pdf", plot = bw_plot, width = 10, height = 10)
return(list(Color_Plot = color_plot, BW_Plot = bw_plot))
}
# Example usage
result <- process_data(data, stimulus_tracking)
# Read stimulus tracking data
stimulus_tracking <- read.csv("../stimuli/sachs/stims_v2/Final Stimuli Labeled.csv")
# Function to process data and generate two plots
process_data <- function(portions_file, tracking_file) {
stimulus_tracking$start.time <- as.numeric(stimulus_tracking$start.time)
stimulus_tracking$end.time <- as.numeric(stimulus_tracking$end.time)
# Merge to get start and end valence/arousal for each stimulus
extracted_sections <- stimulus_tracking %>%
left_join(data, by = c("original.song" = "song", "start.time" = "second")) %>%
rename(Valence_Start = valence_filt, Arousal_Start = arousal_filt) %>%
left_join(data, by = c("original.song" = "song", "end.time" = "second")) %>%
rename(Valence_End = valence_filt, Arousal_End = arousal_filt) %>%
select(original.song, Final.Label, Valence_Start, Arousal_Start, Valence_End, Arousal_End)
# Create a long-format dataframe for plotting
plot_data <- extracted_sections %>%
pivot_longer(cols = c(Valence_Start, Valence_End, Arousal_Start, Arousal_End),
names_to = c("Metric", "Type"),
names_pattern = "(.*)_(.*)") %>%
pivot_wider(names_from = Metric, values_from = value)
# Set shapes for start and end
plot_data$Shape <- ifelse(plot_data$Type == "Start", 15, 17)  # Square for start, triangle for end
# Define colors for different final.label categories
colors <- c("red", "blue", "green", "purple")
# 1st plot: Color-coded by `final.label`
color_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song, color = Final.Label)) +
geom_point(aes(shape = factor(Type)), size = 4) +
geom_line(size = 1) +
scale_shape_manual(values = c("Start" = 15, "End" = 17)) +  # Square and Triangle
scale_color_manual(values = colors) +
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank()) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# 2nd plot: Black and white version
bw_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song)) +
geom_point(aes(shape = factor(Type)), size = 4, color = "black") +
geom_line(size = 1, color = "black") +
scale_shape_manual(values = c("Start" = 15, "End" = 17)) +  # Square and Triangle
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank()) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# Save plots
ggsave("Color_Coded_Stimuli.pdf", plot = color_plot, width = 12, height = 12)
ggsave("Black_White_Stimuli.pdf", plot = bw_plot, width = 12, height = 12)
return(list(Color_Plot = color_plot, BW_Plot = bw_plot))
}
# Example usage
result <- process_data(data, stimulus_tracking)
# Read stimulus tracking data
stimulus_tracking <- read.csv("../stimuli/sachs/stims_v2/Final Stimuli Labeled.csv")
# Function to process data and generate two plots
process_data <- function(portions_file, tracking_file) {
stimulus_tracking$start.time <- as.numeric(stimulus_tracking$start.time)
stimulus_tracking$end.time <- as.numeric(stimulus_tracking$end.time)
# Merge to get start and end valence/arousal for each stimulus
extracted_sections <- stimulus_tracking %>%
left_join(data, by = c("original.song" = "song", "start.time" = "second")) %>%
rename(Valence_Start = valence_filt, Arousal_Start = arousal_filt) %>%
left_join(data, by = c("original.song" = "song", "end.time" = "second")) %>%
rename(Valence_End = valence_filt, Arousal_End = arousal_filt) %>%
select(original.song, Final.Label, Valence_Start, Arousal_Start, Valence_End, Arousal_End)
# Create a long-format dataframe for plotting
plot_data <- extracted_sections %>%
pivot_longer(cols = c(Valence_Start, Valence_End, Arousal_Start, Arousal_End),
names_to = c("Metric", "Type"),
names_pattern = "(.*)_(.*)") %>%
pivot_wider(names_from = Metric, values_from = value)
# Set shapes for start and end
plot_data$Shape <- ifelse(plot_data$Type == "Start", 15, 17)  # Square for start, triangle for end
# Define colors for different final.label categories
colors <- c("red", "blue", "green", "purple")
# 1st plot: Color-coded by `final.label`
color_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song, color = Final.Label)) +
geom_point(aes(shape = factor(Type)), size = 4) +
geom_line(size = 1) +
scale_shape_manual(values = c("Start" = 15, "End" = 17), name = "Time") +  # Square and Triangle
scale_color_manual(values = colors, name = "Final Category") +
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank(),
legend.title = element_text(size = 24),
legend.text = element_text(size = 22)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# 2nd plot: Black and white version
bw_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song)) +
geom_point(aes(shape = factor(Type)), size = 4, color = "black") +
geom_line(size = 1, color = "black") +
scale_shape_manual(values = c("Start" = 15, "End" = 17), name = "Time") +  # Square and Triangle
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank(),
legend.title = element_text(size = 24),
legend.text = element_text(size = 22)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# Save plots
ggsave("Color_Coded_Stimuli.pdf", plot = color_plot, width = 12, height = 12)
ggsave("Black_White_Stimuli.pdf", plot = bw_plot, width = 12, height = 12)
return(list(Color_Plot = color_plot, BW_Plot = bw_plot))
}
# Example usage
result <- process_data(data, stimulus_tracking)
# Read stimulus tracking data
stimulus_tracking <- read.csv("../stimuli/sachs/stims_v2/Final Stimuli Labeled.csv")
# Function to process data and generate two plots
process_data <- function(portions_file, tracking_file) {
stimulus_tracking$start.time <- as.numeric(stimulus_tracking$start.time)
stimulus_tracking$end.time <- as.numeric(stimulus_tracking$end.time)
# Merge to get start and end valence/arousal for each stimulus
extracted_sections <- stimulus_tracking %>%
left_join(data, by = c("original.song" = "song", "start.time" = "second")) %>%
rename(Valence_Start = valence_filt, Arousal_Start = arousal_filt) %>%
left_join(data, by = c("original.song" = "song", "end.time" = "second")) %>%
rename(Valence_End = valence_filt, Arousal_End = arousal_filt) %>%
select(original.song, Final.Label, Valence_Start, Arousal_Start, Valence_End, Arousal_End)
# Create a long-format dataframe for plotting
plot_data <- extracted_sections %>%
pivot_longer(cols = c(Valence_Start, Valence_End, Arousal_Start, Arousal_End),
names_to = c("Metric", "Type"),
names_pattern = "(.*)_(.*)") %>%
pivot_wider(names_from = Metric, values_from = value)
# Set shapes for start and end
plot_data$Shape <- ifelse(plot_data$Type == "Start", 15, 17)  # Square for start, triangle for end
# Define colors for different final.label categories
colors <- c("red", "blue", "green", "purple")
# 1st plot: Color-coded by `final.label`
color_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song, color = Final.Label)) +
geom_point(aes(shape = factor(Type)), size = 4) +
geom_line(size = 1) +
scale_shape_manual(values = c("Start" = 15, "End" = 17), name = "Time") +  # Square and Triangle
scale_color_manual(values = colors, name = "Final Category") +
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank(),
legend.title = element_text(size = 24),
legend.text = element_text(size = 22)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# 2nd plot: Black and white version
bw_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song)) +
geom_point(aes(shape = factor(Type)), size = 4, color = "black") +
geom_line(size = 1, color = "black") +
scale_shape_manual(values = c("Start" = 15, "End" = 17), name = "Time") +  # Square and Triangle
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank(),
legend.title = element_text(size = 24),
legend.text = element_text(size = 22)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# Save plots
ggsave("Color_Coded_Stimuli.pdf", plot = color_plot, width = 20, height = 20)
ggsave("Black_White_Stimuli.pdf", plot = bw_plot, width = 20, height = 20)
return(list(Color_Plot = color_plot, BW_Plot = bw_plot))
}
# Example usage
result <- process_data(data, stimulus_tracking)
# Read stimulus tracking data
stimulus_tracking <- read.csv("../stimuli/sachs/stims_v2/Final Stimuli Labeled.csv")
# Function to process data and generate two plots
process_data <- function(portions_file, tracking_file) {
stimulus_tracking$start.time <- as.numeric(stimulus_tracking$start.time)
stimulus_tracking$end.time <- as.numeric(stimulus_tracking$end.time)
# Merge to get start and end valence/arousal for each stimulus
extracted_sections <- stimulus_tracking %>%
left_join(data, by = c("original.song" = "song", "start.time" = "second")) %>%
rename(Valence_Start = valence_filt, Arousal_Start = arousal_filt) %>%
left_join(data, by = c("original.song" = "song", "end.time" = "second")) %>%
rename(Valence_End = valence_filt, Arousal_End = arousal_filt) %>%
select(original.song, Final.Label, Valence_Start, Arousal_Start, Valence_End, Arousal_End)
# Create a long-format dataframe for plotting
plot_data <- extracted_sections %>%
pivot_longer(cols = c(Valence_Start, Valence_End, Arousal_Start, Arousal_End),
names_to = c("Metric", "Type"),
names_pattern = "(.*)_(.*)") %>%
pivot_wider(names_from = Metric, values_from = value)
# Set shapes for start and end
plot_data$Shape <- ifelse(plot_data$Type == "Start", 15, 17)  # Square for start, triangle for end
# Define colors for different final.label categories
colors <- c("red", "blue", "green", "purple")
# 1st plot: Color-coded by `final.label`
color_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song, color = Final.Label)) +
geom_point(aes(shape = factor(Type)), size = 4) +
geom_line(size = 1) +
scale_shape_manual(values = c("Start" = 15, "End" = 17), name = "Time") +  # Square and Triangle
scale_color_manual(values = colors, name = "Final Category") +
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank(),
legend.title = element_text(size = 24),
legend.text = element_text(size = 22)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# 2nd plot: Black and white version
bw_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song)) +
geom_point(aes(shape = factor(Type)), size = 4, color = "black") +
geom_line(size = 1, color = "black") +
scale_shape_manual(values = c("Start" = 15, "End" = 17), name = "Time") +  # Square and Triangle
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank(),
legend.title = element_text(size = 24),
legend.text = element_text(size = 22)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# Save plots
ggsave("Color_Coded_Stimuli.pdf", plot = color_plot, width = 20, height = 15)
ggsave("Black_White_Stimuli.pdf", plot = bw_plot, width = 20, height = 15)
return(list(Color_Plot = color_plot, BW_Plot = bw_plot))
}
# Example usage
result <- process_data(data, stimulus_tracking)
# Read stimulus tracking data
stimulus_tracking <- read.csv("../stimuli/sachs/stims_v2/Final Stimuli Labeled.csv")
# Function to process data and generate two plots
process_data <- function(portions_file, tracking_file) {
stimulus_tracking$start.time <- as.numeric(stimulus_tracking$start.time)
stimulus_tracking$end.time <- as.numeric(stimulus_tracking$end.time)
# Merge to get start and end valence/arousal for each stimulus
extracted_sections <- stimulus_tracking %>%
left_join(data, by = c("original.song" = "song", "start.time" = "second")) %>%
rename(Valence_Start = valence_filt, Arousal_Start = arousal_filt) %>%
left_join(data, by = c("original.song" = "song", "end.time" = "second")) %>%
rename(Valence_End = valence_filt, Arousal_End = arousal_filt) %>%
select(original.song, Final.Label, Valence_Start, Arousal_Start, Valence_End, Arousal_End)
# Create a long-format dataframe for plotting
plot_data <- extracted_sections %>%
pivot_longer(cols = c(Valence_Start, Valence_End, Arousal_Start, Arousal_End),
names_to = c("Metric", "Type"),
names_pattern = "(.*)_(.*)") %>%
pivot_wider(names_from = Metric, values_from = value)
# Set shapes for start and end
plot_data$Shape <- ifelse(plot_data$Type == "Start", 15, 17)  # Square for start, triangle for end
# Define colors for different final.label categories
colors <- c("red", "blue", "green", "purple")
# 1st plot: Color-coded by `final.label`
color_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song, color = Final.Label)) +
geom_point(aes(shape = factor(Type)), size = 4) +
geom_line(size = 1) +
scale_shape_manual(values = c("Start" = 15, "End" = 17), name = "Time") +  # Square and Triangle
scale_color_manual(values = colors, name = "Final Category") +
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank(),
legend.title = element_text(size = 24),
legend.text = element_text(size = 22)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# 2nd plot: Black and white version
bw_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = original.song)) +
geom_point(aes(shape = factor(Type)), size = 4, color = "black") +
geom_line(size = 1, color = "black") +
scale_shape_manual(values = c("Start" = 15, "End" = 17), name = "Time") +  # Square and Triangle
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank(),
legend.title = element_text(size = 24),
legend.text = element_text(size = 22)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# Save plots
ggsave("Color_Coded_Stimuli.pdf", plot = color_plot, width = 15, height = 15)
ggsave("Black_White_Stimuli.pdf", plot = bw_plot, width = 15, height = 15)
return(list(Color_Plot = color_plot, BW_Plot = bw_plot))
}
# Example usage
result <- process_data(data, stimulus_tracking)
View(data)
View(result)
View(result[["Color_Plot"]][["data"]])
# Read stimulus tracking data
stimulus_tracking <- read.csv("../stimuli/sachs/stims_v2/Final Stimuli Labeled.csv")
# Function to process data and generate two plots
process_data <- function(portions_file, tracking_file) {
stimulus_tracking$start.time <- as.numeric(stimulus_tracking$start.time)
stimulus_tracking$end.time <- as.numeric(stimulus_tracking$end.time)
# Merge to get start and end valence/arousal for each stimulus
extracted_sections <- stimulus_tracking %>%
left_join(data, by = c("original.song" = "song", "start.time" = "second")) %>%
rename(Valence_Start = valence_filt, Arousal_Start = arousal_filt) %>%
left_join(data, by = c("original.song" = "song", "end.time" = "second")) %>%
rename(Valence_End = valence_filt, Arousal_End = arousal_filt) %>%
select(original.song, file.name, Final.Label, Valence_Start, Arousal_Start, Valence_End, Arousal_End)
# Create a long-format dataframe for plotting
plot_data <- extracted_sections %>%
pivot_longer(cols = c(Valence_Start, Valence_End, Arousal_Start, Arousal_End),
names_to = c("Metric", "Type"),
names_pattern = "(.*)_(.*)") %>%
pivot_wider(names_from = Metric, values_from = value)
# Set shapes for start and end
plot_data$Shape <- ifelse(plot_data$Type == "Start", 15, 17)  # Square for start, triangle for end
# Define colors for different final.label categories
colors <- c("red", "blue", "green", "purple")
# 1st plot: Color-coded by `final.label`
color_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = file.name, color = Final.Label)) +
geom_point(aes(shape = factor(Type)), size = 4) +
geom_line(size = 1) +
scale_shape_manual(values = c("Start" = 15, "End" = 17), name = "Time") +  # Square and Triangle
scale_color_manual(values = colors, name = "Final Category") +
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank(),
legend.title = element_text(size = 24),
legend.text = element_text(size = 22)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# 2nd plot: Black and white version
bw_plot <- ggplot(plot_data, aes(x = Valence, y = Arousal, group = file.name)) +
geom_point(aes(shape = factor(Type)), size = 4, color = "black") +
geom_line(size = 1, color = "black") +
scale_shape_manual(values = c("Start" = 15, "End" = 17), name = "Time") +  # Square and Triangle
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 28),
panel.grid = element_blank(),
legend.title = element_text(size = 24),
legend.text = element_text(size = 22)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "red") +
geom_vline(xintercept = 0, linetype = "dotted", color = "red") +
labs(x = "Normed Valence Rating", y = "Normed Arousal Rating")
# Save plots
ggsave("Color_Coded_Stimuli.pdf", plot = color_plot, width = 15, height = 15)
ggsave("Black_White_Stimuli.pdf", plot = bw_plot, width = 15, height = 15)
return(list(Color_Plot = color_plot, BW_Plot = bw_plot))
}
# Example usage
result <- process_data(data, stimulus_tracking)
