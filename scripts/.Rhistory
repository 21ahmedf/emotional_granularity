results_recode$allmusicICC <- rowMeans(results_recode[, c("negmusicICC", "posmusicICC")], na.rm = TRUE)
results_recode$allpicICC <- rowMeans(results_recode[, c("negpicICC", "pospicICC")], na.rm = TRUE)
View(results)
merged_df <- merge(scores, results, by.x = "PROLIFIC_PID", by.y = "ID", all = FALSE)
merged_df <- merge(scores, results, by.x = "SURVEY_CODE", by.y = "ID", all = FALSE)
View(merged_df)
# Find SURVEY_CODE in df1 that do not match any ID in df2
non_matching_in_df1 <- scores[!scores$SURVEY_CODE %in% results$ID, ]
# Find ID in df2 that do not match any SURVEY_CODE in df1
non_matching_in_df2 <- results[!results$ID %in% scores$SURVEY_CODE, ]
# Display the non-matching entries
print("SURVEY_CODEs in df1 that do not match any ID in df2:")
print(non_matching_in_df1)
print("IDs in df2 that do not match any SURVEY_CODE in df1:")
print(non_matching_in_df2)
View(merged_df)
# Select only the numeric columns for the correlation matrix
numeric_columns <- merged_df[, sapply(merged_df, is.numeric)]
# Calculate the correlation matrix
correlation_matrix <- cor(numeric_columns, use = "complete.obs")
# Function to compute significance levels
cor.mtest <- function(mat, conf.level = 0.95) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], conf.level = conf.level)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# Compute p-values
p_values <- cor.mtest(numeric_columns)
# Specify the folder where you want to save the file
output_folder <- "../results/qualtrics/"
# Combine the folder path with the file name
output_file <- file.path(output_folder, "Significant Correlations Plot (without Recoding ICC) 10-7-24.png")
# Open a PNG device with the specified file path
png(output_file, width = 800, height = 800)
# Generate the corrplot
corrplot(correlation_matrix, method = "circle", type = "upper",
p.mat = p_values, sig.level = 0.05, insig = "blank",
tl.col = "black", tl.srt = 45, addCoef.col = NULL)
# Close the PNG device
dev.off()
# Select only the numeric columns for the correlation matrix
numeric_columns <- merged_df[, sapply(merged_df, is.numeric)]
# Calculate the correlation matrix
correlation_matrix <- cor(numeric_columns, use = "complete.obs")
# Function to compute significance levels
cor.mtest <- function(mat, conf.level = 0.95) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], conf.level = conf.level)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# Compute p-values
p_values <- cor.mtest(numeric_columns)
# Specify the folder where you want to save the file
output_folder <- "../results/qualtrics/"
# Combine the folder path with the file name
output_file <- file.path(output_folder, "Significant Correlations Plot (without Recoding ICC) 10-7-24.png")
# Open a PNG device with the specified file path
png(output_file, width = 800, height = 800)
# Generate the corrplot
corrplot(correlation_matrix, method = "circle", type = "upper",
p.mat = p_values, sig.level = 0.05, insig = "blank",
tl.col = "black", tl.srt = 45, addCoef.col = NULL,
col = colorRampPalette(c("blue", "white", "red"))(200))
title(main = "Significant Correlations (without Recoding Granularity Scores)", col.main = "black", font.main = 4)
# Close the PNG device
dev.off()
merged_df_recoded <- merge(scores, results_recode, by.x = "SURVEY_CODE", by.y = "ID", all = FALSE)
# Select only the numeric columns for the correlation matrix
numeric_columns <- merged_df[, sapply(merged_df, is.numeric)]
numeric_columns_recoded <- merged_df_recoded[, sapply(merged_df_recoded, is.numeric)]
# Calculate the correlation matrix
correlation_matrix <- cor(numeric_columns, use = "complete.obs")
correlation_matrix_recoded <- cor(numeric_columns_recoded, use = "complete.obs")
# Function to compute significance levels
cor.mtest <- function(mat, conf.level = 0.95) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], conf.level = conf.level)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# Compute p-values
p_values <- cor.mtest(numeric_columns)
p_values_recoded <- cor.mtest(numeric_columns_recoded)
# Specify the folder where you want to save the file
output_folder <- "../results/qualtrics/"
# Combine the folder path with the file name
output_file <- file.path(output_folder, "Significant Correlations Plot (without Recoding ICC) 10-7-24.png")
# Open a PNG device with the specified file path
png(output_file, width = 800, height = 800)
# Generate the corrplot
corrplot(correlation_matrix, method = "circle", type = "upper",
p.mat = p_values, sig.level = 0.05, insig = "blank",
tl.col = "black", tl.srt = 45, addCoef.col = NULL,
col = colorRampPalette(c("blue", "white", "red"))(200))
title(main = "Significant Correlations (without Recoding Granularity Scores)", col.main = "black", font.main = 4)
# Close the PNG device
dev.off()
# Specify the folder where you want to save the file
output_folder <- "../results/qualtrics/"
# Combine the folder path with the file name
output_file <- file.path(output_folder, "Significant Correlations Plot (with Recoding ICC) 10-7-24.png")
# Open a PNG device with the specified file path
png(output_file, width = 800, height = 800)
# Generate the corrplot
corrplot(correlation_matrix_recoded, method = "circle", type = "upper",
p.mat = p_values, sig.level = 0.05, insig = "blank",
tl.col = "black", tl.srt = 45, addCoef.col = NULL,
col = colorRampPalette(c("blue", "white", "red"))(200))
title(main = "Significant Correlations (WITH Recoding Granularity Scores)", col.main = "black", font.main = 4)
# Close the PNG device
dev.off()
View(data)
View(music_negative)
View(music_negative_list)
View(pos_corr_analysis)
View(pos_pic_data)
View(pic_negative_summary)
View(pic_negative)
View(pos_plot)
View(pos_pic_data)
View(averages_pos_music)
View(averages_pos_pic)
View(all_averages)
View(all_averages)
# 8 clips
averages_pos_music <- pos_music_data %>%
group_by(Spreadsheet..Audio, Object.Name) %>%
summarise(
Average.Response = mean(Response, na.rm = TRUE),
se_value = sd(Response, na.rm = TRUE) / sqrt(n())
)
# 8 clips
averages_neg_music <- neg_music_data %>%
group_by(Spreadsheet..Audio, Object.Name) %>%
summarise(
Average.Response = mean(Response, na.rm = TRUE),
se_value = sd(Response, na.rm = TRUE) / sqrt(n())
)
# 8 pics
averages_pos_pic <- pos_pic_data %>%
group_by(Spreadsheet..Image, Object.Name) %>%
summarise(
Average.Response = mean(Response, na.rm = TRUE),
se_value = sd(Response, na.rm = TRUE) / sqrt(n())
)
# 8 pics
averages_neg_pic <- neg_pic_data %>%
group_by(Spreadsheet..Image, Object.Name) %>%
summarise(
Average.Response = mean(Response, na.rm = TRUE),
se_value = sd(Response, na.rm = TRUE) / sqrt(n())
)
all_averages <- bind_rows(
averages_pos_music %>% mutate(Type = "Positive Valence Music"),
averages_neg_music %>% mutate(Type = "Negative Valence Music"),
averages_pos_pic %>% mutate(Type = "Positive Valence Pictures"),
averages_neg_pic %>% mutate(Type = "Negative Valence Pictures"),
)
all_averages$Object.Name <- gsub("Slider", "", all_averages$Object.Name)
# Trim any extra whitespace that might be left after removing "Slider"
all_averages$Object.Name <- trimws(all_averages$Object.Name)
emotion_order <- c("Gloomy", "Anxious", "Sad", "Scared", "Upset", "Excited", "Happy", "Joyful", "Relaxed", "Satisfied")
all_averages$Object.Name <- factor(all_averages$Object.Name, levels = emotion_order)
grouped_averages <- split(all_averages, all_averages$Type)
View(all_averages)
View(grouped_averages)
View(grouped_averages[["Negative Valence Music"]])
write.csv(grouped_averages)
write.csv(grouped_averages, file='../data/rating-task/Grouped Averages.csv')
df_wide <- pivot_wider(grouped_averages$`Negative Valence Music`,
names_from = Object.Name,
values_from = Average.Response)
View(df_wide)
df_wide <- pivot_wider(all_averages,
names_from = Object.Name,
values_from = Average.Response)
df_wide <- pivot_longer(all_averages,
names_from = Object.Name,
values_from = Average.Response)
df_wide <- pivot_wider(all_averages,
names_from = Object.Name,
values_from = Average.Response)
df_wide <- pivot_wider(all_averages[, c("Spreadsheet..Audio", "Object.Name", "Average.Response", "Spreadsheet..Image")],
names_from = Object.Name,
values_from = Average.Response)
df_wide <- pivot_wider(all_averages[, c("Spreadsheet..Audio", "Object.Name", "Average.Response", "Spreadsheet..Image")],
names_from = Object.Name,
values_from = Average.Response)
# Split into audio and image datasets
audio_df <- df_wide[!is.na(df_wide$Spreadsheet.Audio), ]
df_wide <- pivot_wider(all_averages[, c("Spreadsheet..Audio", "Object.Name", "Average.Response", "Spreadsheet..Image")],
names_from = Object.Name,
values_from = Average.Response)
# Split into audio and image datasets
audio_df <- df_wide[!is.na(df_wide$Spreadsheet..Audio), ]
image_df <- df_wide[!is.na(df_wide$Spreadsheet..Image), ]
# Drop the unnecessary columns for correlation
audio_corr <- cor(audio_df[ , -c(1, 2)])  # Removing 'Spreadsheet.Audio' and 'Spreadsheet.Image'
image_corr <- cor(image_df[ , -c(1, 2)])  # Removing 'Spreadsheet.Audio' and 'Spreadsheet.Image'
# Plot heatmap for audio correlation
ggcorrplot(audio_corr,
method = "circle",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Audio Files Correlation Heatmap",
tl.cex = 10,
ggtheme = theme_minimal())
library(ggcorrplot)
install.packages('ggcorrplot')
library(ggcorrplot)
install.packages('ggcorrplot')
library(ggcorrplot)
df_wide <- pivot_wider(all_averages[, c("Spreadsheet..Audio", "Object.Name", "Average.Response", "Spreadsheet..Image")],
names_from = Object.Name,
values_from = Average.Response)
# Split into audio and image datasets
audio_df <- df_wide[!is.na(df_wide$Spreadsheet..Audio), ]
image_df <- df_wide[!is.na(df_wide$Spreadsheet..Image), ]
# Drop the unnecessary columns for correlation
audio_corr <- cor(audio_df[ , -c(1, 2)])  # Removing 'Spreadsheet.Audio' and 'Spreadsheet.Image'
image_corr <- cor(image_df[ , -c(1, 2)])  # Removing 'Spreadsheet.Audio' and 'Spreadsheet.Image'
# Plot heatmap for audio correlation
ggcorrplot(audio_corr,
method = "circle",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Audio Files Correlation Heatmap",
tl.cex = 10,
ggtheme = theme_minimal())
# Plot heatmap for image correlation
ggcorrplot(image_corr,
method = "circle",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Image Files Correlation Heatmap",
tl.cex = 10,
ggtheme = theme_minimal())
install.packages("ggcorrplot")
# Plot heatmap for audio correlation
ggcorrplot(audio_corr,
method = "circle",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Music",
tl.cex = 10,
ggtheme = theme_minimal())
# Plot heatmap for image correlation
ggcorrplot(image_corr,
method = "circle",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Pictures",
tl.cex = 10,
ggtheme = theme_minimal())
# Plot heatmap for image correlation
ggcorrplot(image_corr,
method = "circle",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Pictures",
tl.cex = 10,
ggtheme = theme_classicl())
# Plot heatmap for image correlation
ggcorrplot(image_corr,
method = "circle",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Pictures",
tl.cex = 10,
ggtheme = theme_classic())
# Plot heatmap for image correlation
ggcorrplot(image_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Pictures",
tl.cex = 10,
ggtheme = theme_classic())
# Plot heatmap for audio correlation
ggcorrplot(audio_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Music",
tl.cex = 10,
ggtheme = theme_classic())
# Plot heatmap for image correlation
ggcorrplot(image_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Pictures",
tl.cex = 10,
ggtheme = theme_classic())
df_wide <- df_wide[, c("Spreadsheet..Audio", "Spreadsheet..Image", emotion_order)]
# Split into audio and image datasets
audio_df <- df_wide[!is.na(df_wide$Spreadsheet..Audio), ]
image_df <- df_wide[!is.na(df_wide$Spreadsheet..Image), ]
# Drop the unnecessary columns for correlation
audio_corr <- cor(audio_df[ , -c(1, 2)])  # Removing 'Spreadsheet.Audio' and 'Spreadsheet.Image'
image_corr <- cor(image_df[ , -c(1, 2)])  # Removing 'Spreadsheet.Audio' and 'Spreadsheet.Image'
# Plot heatmap for audio correlation
ggcorrplot(audio_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Music",
tl.cex = 10,
ggtheme = theme_classic())
# Plot heatmap for image correlation
ggcorrplot(image_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Pictures",
tl.cex = 10,
ggtheme = theme_classic())
ggsave('../results/rating-task/Picture Emotion Correlations 10-9-24.png', pic_corr_plot, width = 9)
music_corr_plot <- ggcorrplot(audio_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Music",
tl.cex = 10,
ggtheme = theme_classic())
# Plot heatmap for image correlation
pic_corr_plot <- ggcorrplot(image_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Pictures",
tl.cex = 10,
ggtheme = theme_classic())
ggsave('../results/rating-task/Picture Emotion Correlations 10-9-24.png', pic_corr_plot, width = 9)
ggsave('../results/rating-task/Music Emotion Correlations 10-9-24.png', music_corr_plot, width = 9)
View(pos_pic_data)
View(granularity_music)
View(music_negative)
View(music_negative)
# Drop the unnecessary columns for correlation
music_neg_corr <- cor(music_negative[ , -c(1)])  # Removing 'Spreadsheet.Audio' and 'Spreadsheet.Image'
pic_neg_corr <- cor(pic_negative[ , -c(1)])  # Removing 'Spreadsheet.Audio' and 'Spreadsheet.Image'
# Plot heatmap for audio correlation
music_neg_corr_plot <- ggcorrplot(music_neg_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Music",
tl.cex = 10,
ggtheme = theme_classic())
# Plot heatmap for image correlation
pic_neg_corr_plot <- ggcorrplot(pic_neg_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Emotion Responses to Pictures",
tl.cex = 10,
ggtheme = theme_classic())
ggsave('../results/rating-task/Picture Negative Emotion Correlations 10-9-24.png', pic_neg_corr_plot, width = 9)
ggsave('../results/rating-task/Music Negative Emotion Correlations 10-9-24.png', music_neg_corr_plot, width = 9)
# Drop the ID column
music_neg_corr <- cor(music_negative[ , -c(1)])
pic_neg_corr <- cor(pic_negative[ , -c(1)])
music_pos_corr <- cor(music_positive[ , -c(1)])
pic_pos_corr <- cor(pic_positive[ , -c(1)])
# Plot heatmap for audio correlation
music_neg_corr_plot <- ggcorrplot(music_neg_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Negative Emotion Responses to Music",
tl.cex = 10,
ggtheme = theme_classic())
music_pos_corr_plot <- ggcorrplot(music_pos_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Positive Emotion Responses to Music",
tl.cex = 10,
ggtheme = theme_classic())
# Plot heatmap for image correlation
pic_neg_corr_plot <- ggcorrplot(pic_neg_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Negative Emotion Responses to Pictures",
tl.cex = 10,
ggtheme = theme_classic())
pic_pos_corr_plot <- ggcorrplot(pic_pos_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Positive Emotion Responses to Pictures",
tl.cex = 10,
ggtheme = theme_classic())
ggsave('../results/rating-task/Picture Negative Emotion Correlations 10-9-24.png', pic_neg_corr_plot, width = 9)
ggsave('../results/rating-task/Music Negative Emotion Correlations 10-9-24.png', music_neg_corr_plot, width = 9)
ggsave('../results/rating-task/Picture Positive Emotion Correlations 10-9-24.png', pic_neg_corr_plot, width = 9)
ggsave('../results/rating-task/Music Positive Emotion Correlations 10-9-24.png', music_neg_corr_plot, width = 9)
# Drop the ID column
music_neg_corr <- cor(music_negative[ , -c(1)])
pic_neg_corr <- cor(pic_negative[ , -c(1)])
music_pos_corr <- cor(music_positive[ , -c(1)])
pic_pos_corr <- cor(pic_positive[ , -c(1)])
# Plot heatmap for audio correlation
music_neg_corr_plot <- ggcorrplot(music_neg_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Negative Emotion Responses to Music",
tl.cex = 10,
ggtheme = theme_classic())
music_pos_corr_plot <- ggcorrplot(music_pos_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Positive Emotion Responses to Music",
tl.cex = 10,
ggtheme = theme_classic())
# Plot heatmap for image correlation
pic_neg_corr_plot <- ggcorrplot(pic_neg_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Negative Emotion Responses to Pictures",
tl.cex = 10,
ggtheme = theme_classic())
pic_pos_corr_plot <- ggcorrplot(pic_pos_corr,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlations of Positive Emotion Responses to Pictures",
tl.cex = 10,
ggtheme = theme_classic())
ggsave('../results/rating-task/Picture Negative Emotion Correlations 10-9-24.png', pic_neg_corr_plot, width = 9)
ggsave('../results/rating-task/Music Negative Emotion Correlations 10-9-24.png', music_neg_corr_plot, width = 9)
ggsave('../results/rating-task/Picture Positive Emotion Correlations 10-9-24.png', pic_pos_corr_plot, width = 9)
ggsave('../results/rating-task/Music Positive Emotion Correlations 10-9-24.png', music_pos_corr_plot, width = 9)
